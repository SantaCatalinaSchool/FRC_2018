// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6665.Itsnotmyrobot2018;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainSpeedControllerleft_back;
    public static SpeedController driveTrainSpeedControllerleft_front;
    public static SpeedControllerGroup driveTrainSpeedControllerLeft;
    public static SpeedController driveTrainSpeedControllerright_back;
    public static SpeedController driveTrainSpeedControllerright_front;
    public static SpeedControllerGroup driveTrainSpeedControllerRight;
    public static DifferentialDrive driveTrainDifferentialDrive1;
    public static DoubleSolenoid clawDoubleSolenoidClaw;
    public static Compressor aCompressorCompress;
    public static DoubleSolenoid hangerDoubleSolenoidhanger;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainSpeedControllerleft_back = new Spark(4);
        LiveWindow.addActuator("DriveTrain", "Speed Controller left_back", (Spark) driveTrainSpeedControllerleft_back);
        driveTrainSpeedControllerleft_back.setInverted(false);
        driveTrainSpeedControllerleft_front = new Spark(0);
        LiveWindow.addActuator("DriveTrain", "Speed Controller left_front", (Spark) driveTrainSpeedControllerleft_front);
        driveTrainSpeedControllerleft_front.setInverted(false);
        driveTrainSpeedControllerLeft = new SpeedControllerGroup(driveTrainSpeedControllerleft_front, driveTrainSpeedControllerleft_back  );
        LiveWindow.addActuator("DriveTrain", "Speed Controller Left", driveTrainSpeedControllerLeft);
        
        driveTrainSpeedControllerright_back = new Spark(7);
        LiveWindow.addActuator("DriveTrain", "Speed Controller right_back", (Spark) driveTrainSpeedControllerright_back);
        driveTrainSpeedControllerright_back.setInverted(false);
        driveTrainSpeedControllerright_front = new Spark(6);
        LiveWindow.addActuator("DriveTrain", "Speed Controller right_front", (Spark) driveTrainSpeedControllerright_front);
        driveTrainSpeedControllerright_front.setInverted(false);
        driveTrainSpeedControllerRight = new SpeedControllerGroup(driveTrainSpeedControllerright_front, driveTrainSpeedControllerright_back  );
        LiveWindow.addActuator("DriveTrain", "Speed Controller Right", driveTrainSpeedControllerRight);
        
        driveTrainDifferentialDrive1 = new DifferentialDrive(driveTrainSpeedControllerLeft, driveTrainSpeedControllerRight);
        LiveWindow.addActuator("DriveTrain", "Differential Drive 1", driveTrainDifferentialDrive1);
        driveTrainDifferentialDrive1.setSafetyEnabled(true);
        driveTrainDifferentialDrive1.setExpiration(0.1);
        driveTrainDifferentialDrive1.setMaxOutput(1.0);

        clawDoubleSolenoidClaw = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("Claw", "Double Solenoid Claw", clawDoubleSolenoidClaw);
        
        aCompressorCompress = new Compressor(0);
        LiveWindow.addActuator("ACompressor", "Compress", aCompressorCompress);
        
        hangerDoubleSolenoidhanger = new DoubleSolenoid(0, 2, 3);
        LiveWindow.addActuator("Hanger", "Double Solenoid hanger", hangerDoubleSolenoidhanger);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
